/*CSS Source Code*/
body {
  transition: all .6s ease-in-out;
  --background-color: skyblue;
  --color: #444;
}

body[data-light-level="normal"] {
    background: var(--background-color);
    color: var(--color);
}

body[data-light-level="dim"] {
  --background-color: orange;
  --color: #FF6828;
}

body[data-light-level="washed"] {
  --background-color: skyblue;
  --color:#444 ;
}

/* Sample UI styles */
body {
  font-family: "Georgia";
  line-height: 1.25em;
}

blockquote {
  font-size: 1.25em;
  font-style: italic;
  margin: 1.5em 2em;
}
/* CSS Source Code*/




//*JS Source code*//

const LIGHT_LEVELS = [
  {
    value: '0',
    minLux: 0,
    maxLux: 49,
    name: 'dim',
    label: 'Dim'
  },
  {
    value: '1',
    minLux: 50,
    maxLux: 999,
    name: 'normal',
    label: 'Normal'
  },
  {
    value: '2',
    minLux: 1000,
    maxLux: 10000, // Warning: Arbitrarily large number!
    name: 'washed',
    label: 'Washed'

  }
]

/**
 * startAmbientLightSensor
 *
 * @return {Object|null} Our shiny light sensor, or null if there's none available
 * @example
 *
 *     inputElement.addEventListener(onFormInputChange);
 */
function startAmbientLightSensor() {
  // The light sensor API is not available in this browser
  if (!('AmbientLightSensor' in window)) {
    return null
  }
  const sensor = new AmbientLightSensor()
  sensor.onreading = event => {
    const illuminance = event.target.illuminance
    const lightLevel = LIGHT_LEVELS.find(function (level) {
      return illuminance > level.minLux && illuminance < level.maxLux
    })

    // Here's our 'ponyfill' bit..
    document.body.setAttribute('data-light-level', lightLevel.name)

    // Keep our UI in sync
    document.getElementById('light-level').value = lightLevel.value

    // And let's print the raw value to the UI to help us debug
    document.getElementById('debug-sensor-input-available').textContent = illuminance
  };
  sensor.onerror = (event) => {
    // TODO: do something more useful with this error, e.g. allow the user to restart
    console.log(event.error.name, event.error.message);
  };
  sensor.start()
  return sensor;
}

/**
 * onFormInputChange
 *
 * @param {Object} event - The onchange event triggered on our element
 * @return {undefined} Nada!
 * @example
 *
 *     inputElement.addEventListener(onFormInputChange);
 */
function onFormInputChange(event) {
  const formData = new FormData(event.target.form)

  if (event.target.name === 'light-level') {
    const lightLevel = LIGHT_LEVELS.find(function (level) {
      console.log(level, event.target.value, level.value === event.target.value)
      return level.value === event.target.value
    })

    document.getElementById('light-level-label').textContent = lightLevel.label
    // Fake the ponyfill's behaviour by directly setting a data attribute on the body
    document.body.setAttribute('data-light-level', lightLevel.name)
  }

  // Conditionally disable and enable the light level controls
  const lightLevelInput = document.getElementById('light-level')
  if (formData.get('toggle-control')) {
    lightLevelInput.removeAttribute('disabled')
  } else {
    lightLevelInput.setAttribute('disabled', 'true')
  }
}

// Let's give form controls their behaviour..

const toggleControlInput = document.getElementById('toggle-control');
const lightLevelInput = document.getElementById('light-level')

toggleControlInput.addEventListener('change', onFormInputChange)
lightLevelInput.addEventListener('change', onFormInputChange)

// .. and finally start the light sensor
const lightSensor = startAmbientLightSensor();

if (lightSensor) {
  toggleControlInput.checked = false
  lightLevelInput.setAttribute('disabled', 'true');
}

//* JS Code*//

<---HTML---


<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <script async src="scripts/index.js"></script>
  < Uncommment this line to see this demo with a simulated AmbientLightSensor API -->
  < <script async src="sciprts/simulator.js"></script> -->
  <link rel="stylesheet" href="styles/index.css" />
  <title>Beauty Light</title>
</head>

<body>

  <h1>Beauty Light</h1>
  <p>If your browser supports the Ambient Light Sensor JavaScript API and your device is providing an ambient light level
    value then you should see the styles on this page adapt based on whether you are in:
  </p>
    "normal"(50-1000 lux)
  </p>
    "dim"(0-50 lux)
  </p>
  "washed" (1000+ lux) environment.
  </p>

  <p>Bonus: You can also use the controls below to manually set the light level of your choice.</p>

  <blockquote>
    <p>“Say!<br />
      In the dark?<br />
      Here in the dark!<br />
      Would you, could you, in the dark?”</p>
    <footer>― Dr. Seuss, Green Eggs and Ham</footer>
  </blockquote>

  <form>
    <input type="checkbox" name="toggle-control" id="toggle-control" checked />
    <label for="toggle-control">Check this box to manually control the light level</label><br />
    <input type="range" id="light-level" name="light-level" min="0" max="2" value="1" />
    <label id="light-level-label">Normal</label>
  </form>

  <code>
    <dl>
      <dt>Sensor input detected (lux):</dt>
      <dd id="debug-sensor-input-available">false</dd>
    </dl>
  </code>
</body>

</html>

<---HTML---
